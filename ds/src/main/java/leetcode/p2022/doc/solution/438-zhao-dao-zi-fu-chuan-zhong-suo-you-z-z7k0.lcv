### 解题思路

滑动窗口：
[76. 最小覆盖子串](https://leetcode.cn/problems/minimum-window-substring/)
[567. 字符串的排列](https://leetcode.cn/problems/permutation-in-string/)
[438. 找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/)
[3. 无重复字符的最长子串](https://leetcode.cn/problems/longest-substring-without-repeating-characters/)

### 代码

* []

```cpp
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char,int> need,window;
        for(char c:p) need[c]++;
        int left = 0,right = 0;
        int vaild = 0;
        vector<int> res;
        while(right < s.size())
        {
            char s_right = s[right];
            right++;
            if(need.count(s_right)){
                window[s_right]++;
                if(need[s_right] == window[s_right])
                    vaild++;
            }
            while(right - left >= p.size())
            {
                if(vaild == need.size()) res.push_back(left);
                char s_left = s[left];
                left++;
                if(need.count(s_left)){
                    if(need[s_left] == window[s_left])
                        vaild--;
                    window[s_left]--;
                }
            }
        }
        return res;
    }
};
```

* []

```javascript
/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
    const s_len = s.length,p_len = p.length;
    let right = 0,left = 0,valid = 0;
    let res = new Array();
    let need = new Map(),window = new Map();
    for(let char of p){//先将内容放到need和window里面
        if(!need.has(char)) need.set(char,0);
        if(!window.has(char)) window.set(char,0);
        need.set(char,need.get(char)+1);
    }
    while(right < s_len)
    {
        let char_r = s[right];
        right++;
        if(need.has(char_r))
        {
            window.set(char_r,window.get(char_r)+1);//注意：与32行代码相反，这个地方先改值再判断  扩大窗口要先拿进来，后面缩小窗口要先判断，不能反
            if(need.get(char_r) === window.get(char_r))
                valid++;
        }
        while(right - left >= p_len)//限定了窗口的大小
        {
            if(valid === need.size) //注意：这个地方的valid是等于need的size 而不是p_len
                res.push(left);      
            let char_l = s[left];
            left++;
            if(need.has(char_l))
            { 
                if(need.get(char_l) === window.get(char_l))
                    valid--;
                window.set(char_l,window.get(char_l)-1);//注意：记得改值的一步要放到判断后面
            }
        }
    }       
    return res;
};
```

